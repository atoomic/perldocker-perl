From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Todd Rinaldo <toddr@cpanel.net>
Date: Tue, 20 Sep 2016 15:43:41 -0500
Subject: [PATCH 06/30] COW Static support

Cow strings use a counter behind the final "\0",
we are going to use its maximum value of 255
as an immortal counter. (using the constant COW_STATIC)

In addition to use it for B::C in order to use static cowpvs
we will also make it available for any uncompiled programs,
when a COW strings reach the 255 it will never decrease / increase.
---
 SOURCES/perl/sv.c | 35 ++++++++++++++++++-----------------
 SOURCES/perl/sv.h |  3 ++-
 2 files changed, 20 insertions(+), 18 deletions(-)

diff --git a/SOURCES/perl/sv.c b/SOURCES/perl/sv.c
index a5f7da23..d8a28f74 100644
--- a/SOURCES/perl/sv.c
+++ b/SOURCES/perl/sv.c
@@ -4194,7 +4194,7 @@ static void
 S_sv_buf_to_rw(pTHX_ SV *sv)
 {
     struct perl_memory_debug_header * const header =
-	(struct perl_memory_debug_header *)(SvPVX(sv)-PERL_MEMORY_DEBUG_HEADER_SIZE);
+       (struct perl_memory_debug_header *)(SvPVX(sv)-PERL_MEMORY_DEBUG_HEADER_SIZE);
     const MEM_SIZE len = header->size;
     PERL_ARGS_ASSERT_SV_BUF_TO_RW;
     if (mprotect(header, len, PROT_READ|PROT_WRITE))
@@ -4636,9 +4636,7 @@ Perl_sv_setsv_flags(pTHX_ SV *dstr, SV* sstr, const I32 flags)
 		 (sflags & SVf_IsCOW
 		   ? (!len ||
                        (  (CHECK_COWBUF_THRESHOLD(cur,len) || SvLEN(dstr) < cur+1)
-			  /* If this is a regular (non-hek) COW, only so
-			     many COW "copies" are possible. */
-		       && CowREFCNT(sstr) != SV_COW_REFCNT_MAX  ))
+			    ))
 		   : (  (sflags & CAN_COW_MASK) == CAN_COW_FLAGS
 		     && !(SvFLAGS(dstr) & SVf_BREAK)
                      && CHECK_COW_THRESHOLD(cur,len) && cur+1 < len
@@ -4673,7 +4671,7 @@ Perl_sv_setsv_flags(pTHX_ SV *dstr, SV* sstr, const I32 flags)
 		    if (sflags & SVf_IsCOW) {
 			sv_buf_to_rw(sstr);
 		    }
-		    CowREFCNT(sstr)++;
+		    if(CowREFCNT(sstr) != COW_STATIC ) CowREFCNT(sstr)++;
                     SvPV_set(dstr, SvPVX_mutable(sstr));
                     sv_buf_to_ro(sstr);
             } else
@@ -4863,7 +4861,6 @@ Perl_sv_setsv_cow(pTHX_ SV *dstr, SV *sstr)
 	    goto common_exit;
 	}
 	assert(SvCUR(sstr)+1 < SvLEN(sstr));
-	assert(CowREFCNT(sstr) < SV_COW_REFCNT_MAX);
     } else {
 	assert ((SvFLAGS(sstr) & CAN_COW_MASK) == CAN_COW_FLAGS);
 	SvUPGRADE(sstr, SVt_COW);
@@ -4875,7 +4872,7 @@ Perl_sv_setsv_cow(pTHX_ SV *dstr, SV *sstr)
 #  ifdef PERL_DEBUG_READONLY_COW
     if (already) sv_buf_to_rw(sstr);
 #  endif
-    CowREFCNT(sstr)++;	
+    if(CowREFCNT(sstr) != COW_STATIC ) CowREFCNT(sstr)++;
     new_pv = SvPVX_mutable(sstr);
     sv_buf_to_ro(sstr);
 
@@ -5193,9 +5190,11 @@ S_sv_uncow(pTHX_ SV * const sv, const U32 flags)
 	    {
 		U8 cowrefcnt = CowREFCNT(sv);
 		if(cowrefcnt != 0) {
-		    cowrefcnt--;
-		    CowREFCNT(sv) = cowrefcnt;
-		    sv_buf_to_ro(sv);
+            if(cowrefcnt != COW_STATIC ) {
+    		    cowrefcnt--;
+                CowREFCNT(sv) = cowrefcnt;
+            }
+                sv_buf_to_ro(sv);
 		    goto copy_over;
 		}
 	    }
@@ -6764,9 +6763,9 @@ Perl_sv_clear(pTHX_ SV *const orig_sv)
 		}
 	    }
 #ifdef PERL_ANY_COW
-	    else if (SvPVX_const(sv)
-		     && !(SvTYPE(sv) == SVt_PVIO
-		     && !(IoFLAGS(sv) & IOf_FAKE_DIRP)))
+	    else if (SvPVX_const(sv) /* PV is valid */
+		     && !(SvTYPE(sv) == SVt_PVIO /* Not an IO pointer */
+		     && !(IoFLAGS(sv) & IOf_FAKE_DIRP))) /*  */
 	    {
 		if (SvIsCOW(sv)) {
 #ifdef DEBUGGING
@@ -6776,10 +6775,12 @@ Perl_sv_clear(pTHX_ SV *const orig_sv)
 		    }
 #endif
 		    if (SvLEN(sv)) {
-			if (CowREFCNT(sv)) {
-			    sv_buf_to_rw(sv);
-			    CowREFCNT(sv)--;
-			    sv_buf_to_ro(sv);
+			if (CowREFCNT(sv) ) {
+			    if(CowREFCNT(sv) != COW_STATIC ) {
+                    sv_buf_to_rw(sv);
+                    CowREFCNT(sv)--;
+                    sv_buf_to_ro(sv);
+                }
 			    SvLEN_set(sv, 0);
 			}
 		    } else {
diff --git a/SOURCES/perl/sv.h b/SOURCES/perl/sv.h
index 3a648e49..068653e6 100644
--- a/SOURCES/perl/sv.h
+++ b/SOURCES/perl/sv.h
@@ -1890,7 +1890,7 @@ Like C<sv_catsv> but doesn't process magic.
 #ifdef PERL_COPY_ON_WRITE
 #   define SvCANCOW(sv)					    \
 	(SvIsCOW(sv)					     \
-	 ? SvLEN(sv) ? CowREFCNT(sv) != SV_COW_REFCNT_MAX : 1 \
+	 ? 1 \
 	 : (SvFLAGS(sv) & CAN_COW_MASK) == CAN_COW_FLAGS       \
 			    && SvCUR(sv)+1 < SvLEN(sv))
    /* Note: To allow 256 COW "copies", a refcnt of 0 means 1. */
@@ -1898,6 +1898,7 @@ Like C<sv_catsv> but doesn't process magic.
 #   define SV_COW_REFCNT_MAX	((1 << sizeof(U8)*8) - 1)
 #   define CAN_COW_MASK	(SVf_POK|SVf_ROK|SVp_POK|SVf_FAKE| \
 			 SVf_OOK|SVf_BREAK|SVf_READONLY|SVf_PROTECT)
+#   define COW_STATIC SV_COW_REFCNT_MAX
 #endif
 
 #define CAN_COW_FLAGS	(SVp_POK|SVf_POK)
